plugins {
    id 'java-library'
    id 'maven-publish'
    id 'application'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.example'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

bootJar {
    enabled = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework.cloud:spring-cloud-starter:4.1.3'
    implementation 'io.grpc:grpc-core:1.64.0'
    implementation 'io.grpc:grpc-util:1.64.0'
    implementation 'io.grpc:grpc-stub:1.64.0'
    implementation 'io.grpc:grpc-protobuf:1.64.0'
    implementation 'io.grpc:grpc-netty:1.64.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}


publishing {
    publications {
        maven(MavenPublication) {
            artifact("build/libs/grpc-client-grpc-client-$version" + "-plain.jar") {
                extension 'jar'
            }
        }
    }
    repositories {
        maven {
            name 'nexus'
            url "http://localhost:8091/repository/maven-releases/"
            credentials {
                username project.repoUser
                password project.repoPassword
            }
            allowInsecureProtocol true
        }
    }
}


jar {
    manifest.attributes 'Main-Class': application.mainClass
    archiveBaseName = "${rootProject.name}-${project.name}"
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    dependsOn configurations.runtimeClasspath
}

tasks.named('publishMavenPublicationToNexusRepository') {
    dependsOn(jar)
}


javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
